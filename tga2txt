#!/usr/bin/env python

from PIL import Image
import struct
import sys
from zlib import decompress, crc32

HEADER_FMT = '<HII'
VERSION_MASK = 0xF000
FLAG_ZLIB = 0x0001

def get_version(flags):
    return (flags & VERSION_MASK) >> 12

def main(argv):
    if argv[2] == '-':
        src = Image.open(sys.stdin)
    else:
        src = Image.open(argv[2])

    image = Image.new('RGB', src.size)
    image.paste(src)

    n_hdr = struct.calcsize(HEADER_FMT)
    data = image.tobytes()
    length = data[:n_hdr]
    (flags, length, hash) = struct.unpack(HEADER_FMT, length)

    if get_version(flags) != 1:
        sys.stderr.write('Unrecognized Version\n')
        return 1

    if length > len(data)-8:
        sys.stderr.write('Invalid Length\n')
        return 1

    data = struct.unpack_from('<' + str(length) + 's', data[n_hdr:])[0]

    if crc32(data)&0xFFFFFFFF != hash:
        sys.stderr.write('Checksum Failed\n')
        return 1

    if FLAG_ZLIB & flags:
        data = decompress(data)

    if argv[1] == '-':
        sys.stdout.write(data)
    else:
        with open(sys.argv[1], 'wb') as f:
            f.write(data)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        sys.stderr.write('USAGE: tga2txt <output> <input>\n')
        sys.exit(1)
    else:
        sys.exit(main(sys.argv))
